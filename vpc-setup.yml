- hosts: localhost
  connection: local
  gather_facts: False
  tasks:
  - name: Import Vpc Variables
    include_vars: vars/vpc_setup

  - name: Create a VPC with dedicated tenancy and a couple of tags
    amazon.aws.ec2_vpc_net:
      name: "{{vpc_name}}"
      cidr_block: "{{vpcCidr}}"
      region: "{{region}}"
      dns_support: yes
      dns_hostnames: yes
      tenancy: dedicated
      tags:
        module: ec2_vpc_net
        this: works      
      state: "{{state}}"
    register: vpcout

  # - debug:
  #     var: vpcout  

  - name: Create a Public subnet 1 in zone1
    amazon.aws.ec2_vpc_subnet:
      state: "{{ state }}"
      vpc_id: "{{ vpcout.vpc.id }}"
      cidr: "{{ PubSub1Cidr }}"
      region: "{{ region }}"
      az: "{{ zone1 }}"
      map_public: true
      resource_tags:
        Name: "vprofile-pubsubnet1"
    register: pubsub1_out

  - name: Create a Public subnet 2 in zone2
    amazon.aws.ec2_vpc_subnet:
      state: "{{ state }}"
      vpc_id: "{{ vpcout.vpc.id }}"
      cidr: "{{ PubSub2Cidr }}"
      region: "{{ region }}"
      az: "{{ zone2 }}"
      map_public: true
      resource_tags:
        Name: "vprofile-pubsubnet2"
    register: pubsub2_out

  - name: Create a Public subnet 3 in zone3
    amazon.aws.ec2_vpc_subnet:
      state: "{{ state }}"
      vpc_id: "{{ vpcout.vpc.id }}"
      cidr: "{{ PubSub3Cidr }}"
      region: "{{ region }}"
      az: "{{ zone3 }}"
      map_public: true
      resource_tags:
        Name: "vprofile-pubsubnet3"
    register: pubsub3_out

  - name: Create a Private subnet 1 in zone1
    amazon.aws.ec2_vpc_subnet:
      state: "{{ state }}"
      vpc_id: "{{ vpcout.vpc.id }}"
      cidr: "{{ PrivSub1Cidr }}"
      region: "{{ region }}"
      az: "{{ zone1 }}"
      map_public: true
      resource_tags:
        Name: "vprofile-privsubnet1"
    register: privsub1_out

  - name: Create a Private subnet 2 in zone2
    amazon.aws.ec2_vpc_subnet:
      state: "{{ state }}"
      vpc_id: "{{ vpcout.vpc.id }}"
      cidr: "{{ PrivSub2Cidr }}"
      region: "{{ region }}"
      az: "{{ zone2 }}"
      map_public: true
      resource_tags:
        Name: "vprofile-privsubnet2"
    register: privsub2_out

  - name: Create a Private subnet 3 in zone3
    amazon.aws.ec2_vpc_subnet:
      state: "{{ state }}"
      vpc_id: "{{ vpcout.vpc.id }}"
      cidr: "{{ PrivSub3Cidr }}"
      region: "{{ region }}"
      az: "{{ zone3 }}"
      map_public: true
      resource_tags:
        Name: "vprofile-privsubnet3"
    register: privsub3_out

  - name: Internet gateway setup
    amazon.aws.ec2_vpc_igw:
      vpc_id: "{{ vpcout.vpc.id }}"
      region: "{{ region }}"
      state: present
      resource_tags:
        Name: "vprofile-IGW"    
    register: igw_out

  - name: Set up public subnet Route Table 
    amazon.aws.ec2_vpc_route_table:
      vpc_id: "{{ vpcout.vpc.id }}"
      region: "{{ region }}"
      state: present
      resource_tags:
        Name: "vprofile-pubsubRT"
      subnets:
        - "{{ pubsub1_out.subnet.id }}"
        - "{{ pubsub2_out.subnet.id }}"
        - "{{ pubsub3_out.subnet_id }}"
      routes:
        - dest: 0.0.0.0/0
          gateway_id: "{{ igw_out.gateway_id }}"
        - dest: ::/0
          gateway_id: "{{ igw_out.gateway_id }}"
    register: pubRT_out

  - name: Create new nat gateway and allocate new EIP if a nat gateway does not yet exist in the subnet.
    amazon.aws.ec2_vpc_nat_gateway:
      vpc_id: "{{ vpcout.vpc.id }}"
      region: "{{ region }}"
      state: present
      wait: true
      if_exist_do_not_create: true
      subnet_id: "{{ pubsub1_out.subnet.id }}"      # Nat gateway is always kept in the Public subnet. It leaves in the public subnet 
    register: Natgw_out

  - name: Set up private subnet Route Table 
    amazon.aws.ec2_vpc_route_table:
      vpc_id: "{{ vpcout.vpc.id }}"
      region: "{{ region }}"
      state: present
      resource_tags:
        Name: "vprofile-privRT"
      subnets:
        - "{{ privsub1_out.subnet.id }}"
        - "{{ privsub2_out.subnet.id }}"
        - "{{ privsub3_out.subnet_id }}"
      routes:
        - dest: 0.0.0.0/0
          gateway_id: "{{ Natgw_out.nat_gateway_id }}"
        - dest: ::/0
          gateway_id: "{{ igw_out.gateway_id }}"
    register: privRT_out

  - debug:
      var: "{{ item }}"
    loop:
      - vpcout.vpc.id
      - pubsub1_out.subnet.id
      - pubsub2_out.subnet.id
      - pubsub3_out.subnet_id
      - privsub1_out.subnet.id
      - privsub2_out.subnet.id
      - privsub3_out.subnet_id
      - igw_out.gateway_id
      - pubRT_out.route_table.id
      - Natgw_out.nat_gateway_id
      - privRT_out.route_table.id

  - set_fact:
      vpc_id: "{{ vpcout.vpc.id}}"
      pubsub1id: "{{ pubsub1_out.subnet.id}}"
      pubsub2id: "{{ pubsub2_out.subnet.id}}"
      pubsub3id: "{{ pubsub3_out.subnet.id}}"
      priv1subid: "{{privsub1_out.subnet.id}}"
      priv2subid: "{{privsub2_out.subnet.id}}"
      priv3subid: "{{privsub3_out.subnet.id}}"            
      igw_id: "{{ igw_out.gateway_id }}"
      NATGW_id: "{{ Natgw_out.nat_gateway_id }}"
      pubRTid: "{{ pubRT_out.route_table.id }}"
      privRTid: "{{ privRT_out.route_table.id }}"
      cacheable: yes

  - name: Copy or create a Variables file for vpc output
    Copy:
      content: "vpc_id: {{ vpcout.vpc.id}}\npubsub1id: {{ pubsub1_out.subnet.id}}\npubsub2id: {{ pubsub2_out.subnet.id}}\npubsub3id: {{ pubsub3_out.subnet.id}}\npriv1subid: {{privsub1_out.subnet.id}}\npriv2subid: {{privsub2_out.subnet.id}}\npriv3subid: {{privsub3_out.subnet.id}}\nigw_id: {{ igw_out.gateway_id }}\nNATGW_id: {{ Natgw_out.nat_gateway_id }}\npubRTid: {{ pubRT_out.route_table.id }}\nprivRTid: {{ privRT_out.route_table.id }}\n"
      dest: vars/vpc-output_vars